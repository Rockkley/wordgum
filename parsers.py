import sqlite3
from aiogram import types
from datetime import datetime

import dicts
import game
from prettytable import PrettyTable as pt
import keyboards


def about_text():
    return '<b>WordsGum - - –û–± –∏–≥—Ä–µ:</b>\n'\
           '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª–µ–≥–∫–æ –≤—ã—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ –§–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤.\n'\
           '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∫—É–±–∫–∏.\n'\
           '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ <i>"–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"</i>.\n'\
           '–ó–∞ –∫–∞–∂–¥—ã–µ 10 –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –∫—É–±–æ–∫.\n\n'\
           '–ê–≤—Ç–æ—Ä - –°–∞–º–∞—Ä–∏–Ω –ï–≤–≥–µ–Ω–∏–π aka Rockkley\n'\
           '(@Evgeniy_Samarin, https://github.com/Rockkley)\n'\
           '<pre>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –∞–≤—Ç–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ –ª—é–±–æ–π —Å—É–º–º–æ–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</pre>\n'


def welcome_text():
    current_hour = datetime.now().hour
    txt = {0: "üåñ –î–æ–±—Ä–æ–π –Ω–æ—á–∏", 1: "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", 2: "üåû –î–æ–±—Ä—ã–π –¥–µ–Ω—å", 3: "üåÉ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"}
    return txt[current_hour//6]


class UserInfoParser:

    def __init__(self, msg: types.CallbackQuery):
        #  Register user if new
        self.conn = sqlite3.connect('./databases/users.db')
        self.cur = self.conn.cursor()
        self.cur.execute(f'INSERT OR IGNORE INTO users '
                         f'VALUES("{msg.from_user.id}","@{msg.from_user.username}","0","0","1","0","0")')
        self.write_user_level(msg)

    async def endgame(self, call):
        await call.message.edit_text(text=self.after_game_text(call),
                                     parse_mode='HTML',
                                     reply_markup=keyboards.main_menu())
        game.SessionData.score[call.from_user.id] = game.SessionData.ten[call.from_user.id] = game.SessionData.cups[
            call.from_user.id] = 0
        game.SessionData.used_words[call.from_user.id] = []
        game.SessionData.wrong_words[call.from_user.id] = set()

    def main_menu_text(self, msg):
        # Forms Main page text
        main_menu_text = f'<b>WordsGum - - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n' \
                         f'{welcome_text()} {msg.from_user.username}\n' \
                         f'üî∏ –†–∞–Ω–≥ <b>{self.get_user_level(msg)} {self.get_user_degree(msg)}</b>'
        return main_menu_text

    def get_eng_cups(self, msg):
        # Gets English language cups score of a user
        self.cur.execute('SELECT eng_score FROM users WHERE telegram_id = ?', (msg.from_user.id,))
        user_eng_cups = self.cur.fetchone()[0]
        return user_eng_cups

    def get_fin_cups(self, msg):
        # Gets Suomi language cups score of a user
        self.cur.execute('SELECT fin_score FROM users WHERE telegram_id = ?', (msg.from_user.id,))
        user_fin_cups = self.cur.fetchone()[0]
        return user_fin_cups

    def get_user_level(self, msg):
        # Gets level of a user
        self.cur.execute('SELECT level FROM users WHERE telegram_id = ?', (msg.from_user.id,))
        user_level = self.cur.fetchone()[0]
        return user_level

    def write_user_level(self, msg):
        # Writes users level calculated of cups sum to the database
        user_level = int(self.get_fin_cups(msg)) + int(self.get_eng_cups(msg))
        self.cur.execute(f'UPDATE users SET level = ? WHERE telegram_id = ?', (user_level, msg.from_user.id))
        self.conn.commit()

    def get_user_degree(self, msg):
        # Gets degree of a user
        user_level = self.get_user_level(msg)
        degree = {0: '–ù–æ–≤–∏—á–æ–∫', 1: '–ì–æ–≤–æ—Ä—É–Ω', 2: '–¢–æ–ª–º–∞—á', 3: '–õ–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ', 4: '–°–ª–æ–≤–æ–≤—è–∑'}
        return degree[user_level//10]

    def _stat_menu_text(self, msg):
        # Forms statistic page text
        self.write_user_level(msg)

        stat_text = f'<b>WordsGum - - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n' \
                    f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.username}\n' \
                    f'ID - {msg.from_user.id}\n' \
                    f'üî∏ –†–∞–Ω–≥ <b>{self.get_user_level(msg)} {self.get_user_degree(msg)}</b>\n'\
                    f'üèÜ –ö—É–±–∫–∏:\n' \
                    f'üá∫üá∏: {self.get_eng_cups(msg)} üá´üáÆ: {self.get_fin_cups(msg)}'

        self.conn.close()
        return stat_text

    def _cat_menu_text(self, lang):
        # Forms category page text
        language = ''
        if lang.data[5:] == 'fin':
            language = 'üá´üáÆ–§–∏–Ω—Å–∫–∏–π'
        elif lang.data[5:] == 'eng':
            language = 'üá∫üá∏–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'

        cat_text = f'<b>WordsGum - - –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>\n' \
                   f'{language} —è–∑—ã–∫. –î–æ—Å—Ç—É–ø–Ω–æ {2+self.get_user_level(lang)//10} –∏–∑ 4 –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n' \
                   f'–î–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å {10-int(str(self.get_user_level(lang))[-1])} –∫—É–±–∫–æ–≤'

        return cat_text

    def after_game_text(self, call):
        if game.SessionData.cups.get(call.from_user.id) == 0:
            cups_result_text = '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è üèÜ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≥–∞–¥–∞—Ç—å 10 —Å–ª–æ–≤.'
        else:
            cups_result_text = f'–ü–æ–ª—É—á–µ–Ω–æ üèÜ - {game.SessionData.cups.get(call.from_user.id)}'

        return f'–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≥—Ä—É —Å–æ —Å—á—ë—Ç–æ–º {game.SessionData.score.get(call.from_user.id)}.\n{cups_result_text}\n'

    def top_page_text(self):
        self.cur.execute('SELECT * FROM users')
        users = sorted(self.cur.fetchall(), key=lambda user: user[2]+user[3], reverse=True)
        self.cur.close()
        # Creating table
        tb = pt()
        tb.field_names = ["–ò–º—è", "üá∫üá∏", "üá´üáÆ", "–û–±—â–∏–π"]
        for i in range(5):
            tb.add_row([users[i][1], users[i][2], users[i][3], users[i][4]])

        return f'<b>WordsGum- - –¢–û–ü 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n<i>–∏–∑ {len(users)}</i><pre>{str(tb)}</pre>'


